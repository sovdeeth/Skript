import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

import java.time.LocalTime

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'com.github.hierynomus.license' version '0.16.1'
	id 'maven-publish'
	id 'java'
}

allprojects {
	repositories {
		mavenCentral()
		maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
		maven { url 'https://repo.papermc.io/repository/maven-public/' }
		maven { url 'https://ci.emc.gs/nexus/content/groups/aikar/' }
	}
}

dependencies {
	shadow group: 'io.papermc', name: 'paperlib', version: '1.0.7'
	shadow group: 'org.bstats', name: 'bstats-bukkit', version: '3.0.0'
	implementation group: 'io.papermc.paper', name: 'paper-api', version: '1.19.2-R0.1-SNAPSHOT'
	implementation group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '2.2.700'
	implementation group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1'
	implementation group: 'com.sk89q.worldguard', name: 'worldguard-legacy', version: '7.0.0-SNAPSHOT'
	implementation group: 'net.milkbowl.vault', name: 'Vault', version: '1.7.1', {
		exclude group: 'org.bstats', module: 'bstats-bukkit'
	}
	implementation fileTree(dir: 'lib', include: '*.jar')
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

task checkAliases {
	description 'Checks for the existence of the aliases.'
	doLast {
		def aliasFolder = project.file('skript-aliases')
		if (!aliasFolder.exists() || aliasFolder.listFiles().length == 0) {
			throw new InvalidUserDataException('Aliases are missing from \'skript-aliases\' folder. Consider fetching submodules with \'git submodule update --init\'.')
		}
	}
}

task jar(overwrite: true, type: ShadowJar) {
	dependsOn checkAliases
	archiveName jarName ? 'Skript.jar' : jarName
	from sourceSets.main.output
}

task build(overwrite: true, type: ShadowJar) {
	archiveName jarName ? 'Skript.jar' : jarName
	from sourceSets.main.output
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = "sources"
}

tasks.withType(ShadowJar) {
	dependsOn relocateShadowJar
	configurations = [
		project.configurations.shadow
	]
	dependencies {
		include(dependency('io.papermc:paperlib'))
		include(dependency('org.bstats:bstats-bukkit'))
		include(dependency('org.bstats:bstats-base'))
	}
	relocate 'io.papermc.lib', 'ch.njol.skript.paperlib'
	relocate 'org.bstats', 'ch.njol.skript.bstats'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
	from 'skript-aliases', {
		into 'aliases-english' // Change this if we get aliases in other languages
	}
}

processResources {
	filter ReplaceTokens, tokens: [
		'version'         : project.property('version'),
		'today'           : 'unknown', // Don't leak information about system this was built on
		'release-flavor'  : 'selfbuilt-unknown', // Note: 'selfbuilt' prefix makes updater report a custom build
		'release-channel' : 'none', // No updates, so anything else wouldn't make sense
		'release-updater' : 'ch.njol.skript.update.NoUpdateChecker', // Disable update checking
		'release-source'  : '',
		'release-download': 'null'
	]
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId "com.github.SkriptLang"
			artifactId "Skript"
			version project.version
			artifact sourceJar
			artifact tasks.jar
		}
	}

	repositories {
		maven {
			name = "repo"
			url = "https://repo.skriptlang.org/releases"
			credentials {
				username = System.getenv("MAVEN_USERNAME")
				password = System.getenv("MAVEN_PASSWORD")
			}
		}
	}
}

license {
	header file('licenseheader.txt')
	exclude('**/Metrics.java') // Not under GPLv3
	exclude('**/BurgerHelper.java') // Not exclusively GPLv3
	exclude('**/*.sk') // Sample scripts and maybe aliases
	exclude('**/*.lang') // Language files do not have headers (still under GPLv3)
	exclude('**/*.json') // JSON files do not have headers
}

// Task to check that test scripts are named correctly
tasks.register('testNaming') {
	doLast {
		// Regression tests
		for (def file : project.file('src/test/skript/tests/regressions').listFiles()) {
			def name = file.getName()
			if (name.toLowerCase(Locale.ENGLISH) != name) {
				throw new InvalidUserDataException('invalid test name: ' + name)
			}
		}

		// Syntax tests
		for (def dir : project.file('src/test/skript/tests/syntaxes').listFiles()) {
			for (def file : dir.listFiles()) {
				def name = file.getName()
				if (!name.startsWith('.') && !Character.isJavaIdentifierStart(name.codePointAt(0))) {
					throw new InvalidUserDataException('invalid test name: ' + name)
				}
			}
		}
	}
}

// Create a test task with given name, environments dir/file, dev mode and java version.
void createTestTask(String name, String environments, boolean devMode, int javaVersion, boolean genDocs) {
	tasks.register(name, JavaExec) {
		dependsOn jar, testNaming
		javaLauncher = javaToolchains.launcherFor {
	        languageVersion = JavaLanguageVersion.of(javaVersion)
	    }
		if (devMode) {
			standardInput = System.in
		}
		group = 'execution'
		classpath = files([
			'build' + File.separator + 'libs' + File.separator + 'Skript.jar',
			project.configurations.runtimeClasspath.find { it.name.startsWith('gson') },
			sourceSets.main.runtimeClasspath
		])
		main = 'ch.njol.skript.tests.platform.PlatformMain'
		args = [
			'test_runners',
			'src/test/skript/tests',
			'src/test/resources/runner_data',
			environments,
			devMode,
			genDocs
		]
	}
}

def latestEnv = 'java17/paper-1.19.2.json'
def latestJava = 17
def oldestJava = 8

tasks.withType(JavaCompile).configureEach {
	options.compilerArgs += ["-source", "" + oldestJava, "-target", "" + oldestJava]
}

// Register different Skript testing tasks
createTestTask('quickTest', 'src/test/skript/environments/' + latestEnv, false, latestJava, false)
createTestTask('skriptTestJava17', 'src/test/skript/environments/java17', false, latestJava, false)
createTestTask('skriptTestJava8', 'src/test/skript/environments/java8', false, oldestJava, false)
createTestTask('skriptTestDev', 'src/test/skript/environments/' + (project.property('testEnv') == null
	? latestEnv : project.property('testEnv') + '.json'), true, Integer.parseInt(project.property('testEnvJavaVersion') == null
	? latestJava : project.property('testEnvJavaVersion')), false)
tasks.register('skriptTest') {dependsOn skriptTestJava8, skriptTestJava17}
createTestTask('genDocs', 'src/test/skript/environments/' + (project.property('testEnv') == null
	? latestEnv : project.property('testEnv') + '.json'), false, Integer.parseInt(project.property('testEnvJavaVersion') == null
	? latestJava : project.property('testEnvJavaVersion')), true)

// Build flavor configurations
task githubResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		version = project.property('version')
		def channel = 'stable'
		if (version.contains('alpha'))
			channel = 'alpha'
		else if (version.contains('beta'))
			channel = 'beta'
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-github', // SkriptLang build, distributed on Github
			'release-channel' : channel, // Release channel, see above
			'release-updater' : 'ch.njol.skript.update.GithubChecker', // Github API client
			'release-source'  : 'https://api.github.com/repos/SkriptLang/Skript/releases', // Github API URL
			'release-download': 'null' // Update checker will figure it out
		]
	}
	into 'build/resources/main'
}

task githubRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn githubResources
	archiveName = 'Skript-github.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}

task spigotResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		version = project.property('version')
		def channel = 'stable'
		if (version.contains('alpha'))
			channel = 'alpha'
		else if (version.contains('beta'))
			channel = 'beta'
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-spigot', // SkriptLang build, distributed on Spigot resources
			'release-channel' : channel, // Release channel, see above
			'release-updater' : 'ch.njol.skript.update.GithubChecker', // Github API client
			'release-source'  : 'https://api.github.com/repos/SkriptLang/Skript/releases', // Github API URL
			'release-download': '\'http://example.com\'' // TODO insert Spigot URL
		]
	}
	into 'build/resources/main'
}

task spigotRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn spigotResources
	archiveName = 'Skript-spigot.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}

task nightlyResources(type: ProcessResources) {
	from 'src/main/resources', {
		include '**'
		def hash = 'git rev-parse --short HEAD'.execute().text.trim()
		version = project.property('version') + '-nightly-' + hash
		filter ReplaceTokens, tokens: [
			'version'         : version,
			'today'           : '' + LocalTime.now(),
			'release-flavor'  : 'skriptlang-nightly', // SkriptLang build, automatically done by CI
			'release-channel' : 'alpha', // No update checking, but these are VERY unstable
			'release-updater' : 'ch.njol.skript.update.NoUpdateChecker', // No autoupdates for now
			'release-source'  : '',
			'release-download': 'null'
		]
	}
	into 'build/resources/main'
}

task nightlyRelease(type: ShadowJar) {
	from sourceSets.main.output
	dependsOn nightlyResources, licenseMain
	archiveName = 'Skript-nightly.jar'
	manifest {
		attributes(
			'Name': 'ch/njol/skript',
			'Automatic-Module-Name': 'ch.njol.skript',
			'Sealed': 'true'
		)
	}
}
